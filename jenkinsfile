def remote = [:]
remote.name = 'vps'
remote.host = '185.97.144.204'
remote.allowAnyHosts = true

pipeline {
    agent any
    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/saber0amine/HashiCorp_vault_Spring_MicroService.git', description: 'Git repository URL')
        string(name: 'BRANCH', defaultValue: 'master', description: 'Git branch to build')
    }

    environment {
        VAULT_ADDR = 'http://185.97.144.204:8200'
        VAULT_SCRIPT_PATH = '/home/secret_manager/hashiCorp_vault/vault_setup.sh'
        CUSTOMER_APP_IMAGE = 'customer-app:latest'
        INVENTORY_SERVICE_IMAGE = 'inventory-service:latest'
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                git branch: params.BRANCH, url: params.REPO_URL
            }
        }

//         stage('Set up Vault') {
//             steps {
//                 script {
//                     withCredentials([usernamePassword(credentialsId: 'SSH_CRED', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
//                         remote.user = USERNAME
//                         remote.password = PASSWORD
//                     }
//                     sshCommand remote: remote, command: """
//                         chmod +x ${VAULT_SCRIPT_PATH}
//                         ${VAULT_SCRIPT_PATH}
//                     """
//                     env.VAULT_TOKEN = sshCommand remote: remote, command: """
//                         grep 'Initial Root Token:' /home/secret_manager/hashiCorp_vault/init.txt | awk '{print \$NF}'
//                     """.trim()
//                     echo "VAULT_TOKEN: ${env.VAULT_TOKEN}"
//                     echo "VAULT_ADDR: ${env.VAULT_ADDR}"
//                 }
//             }
//         }

        stage('Build Applications') {
            steps {
                dir('customer-front-thymeleaf-app') {
                    sh 'mvn clean package -DskipTests'
                    sh "docker build -t ${env.CUSTOMER_APP_IMAGE} ."
                }
                dir('inventory-service') {
                    sh 'mvn clean package -DskipTests'
                    sh "docker build -t ${env.INVENTORY_SERVICE_IMAGE} ."
                }
            }
        }

        stage('Deploy Applications') {
            steps {
                script {
                    env.VAULT_TOKEN ='myroot'
                    echo "Deploying customer-app with VAULT_TOKEN: ${env.VAULT_TOKEN} and VAULT_ADDR: ${env.VAULT_ADDR}"
                    sshCommand remote: remote, command: """
                        docker run -d --name customer-app -p 8075:8075 \
                        -e VAULT_TOKEN=${env.VAULT_TOKEN} -e VAULT_ADDR=${VAULT_ADDR} \
                        ${env.CUSTOMER_APP_IMAGE}
                    """
                    echo "Deploying inventory-service with VAULT_TOKEN: ${env.VAULT_TOKEN} and VAULT_ADDR: ${env.VAULT_ADDR}"
                    sshCommand remote: remote, command: """
                        docker run -d --name inventory-service -p 8098:8098 \
                        -e VAULT_TOKEN=${env.VAULT_TOKEN} -e VAULT_ADDR=${VAULT_ADDR} \
                        ${env.INVENTORY_SERVICE_IMAGE}
                    """
                }
            }
        }
    }
}